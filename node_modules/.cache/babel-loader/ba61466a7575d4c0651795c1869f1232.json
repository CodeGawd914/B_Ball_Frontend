{"ast":null,"code":"import _classCallCheck from \"/Users/travis/Documents/development/project_bball/project_bball/b-ball-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/travis/Documents/development/project_bball/project_bball/b-ball-frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/travis/Documents/development/project_bball/project_bball/b-ball-frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/travis/Documents/development/project_bball/project_bball/b-ball-frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/travis/Documents/development/project_bball/project_bball/b-ball-frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/travis/Documents/development/project_bball/project_bball/b-ball-frontend/src/Containers/Locations.jsx\";\nimport React, { Component } from 'react';\nimport { Map, InfoWindow, Marker, GoogleApiWrapper } from 'google-maps-react';\nexport var Location =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Location, _Component);\n\n  function Location() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Location);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Location)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      showingInfoWindow: false,\n      //Hides or the shows the infoWindow\n      activeMarker: {},\n      //Shows the active marker upon click\n      selectedPlace: {} //Shows the infoWindow to the selected place upon a marker\n\n    };\n    return _this;\n  }\n\n  _createClass(Location, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      if (navigator && navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(function (pos) {\n          var coords = pos.coords;\n\n          _this2.setState({\n            currentLocation: {\n              lat: coords.latitude,\n              lng: coords.longitude\n            }\n          });\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var style = {\n        width: '60%',\n        height: '60%'\n      };\n      return React.createElement(Map, {\n        google: this.props.google,\n        zoom: 14,\n        style: style,\n        initialCenter: this.props.location,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }, React.createElement(Marker, {\n        onClick: this.onMarkerClick,\n        name: 'Current location',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }), React.createElement(InfoWindow, {\n        onClose: this.onInfoWindowClose,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return Location;\n}(Component);\nexport default GoogleApiWrapper({\n  apiKey: \"AIzaSyDlbBSYoX6bM9k_ZmDCMopQhHPiPI5wjR8\"\n})(Location); // <GoogleMapLoader\n//   containerElement = {mapContainer}\n//   googleMapElement = {\n//     <GoogleMap\n//         defaultZoom={15}\n//         defaultCenter={this.props.location}\n//         options={{streetViewControl:true, mapTypeControl:false}}>\n//         </GoogleMap>\n//       }/>","map":{"version":3,"sources":["/Users/travis/Documents/development/project_bball/project_bball/b-ball-frontend/src/Containers/Locations.jsx"],"names":["React","Component","Map","InfoWindow","Marker","GoogleApiWrapper","Location","state","showingInfoWindow","activeMarker","selectedPlace","navigator","geolocation","getCurrentPosition","pos","coords","setState","currentLocation","lat","latitude","lng","longitude","style","width","height","props","google","location","onMarkerClick","onInfoWindowClose","apiKey"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAAQC,GAAR,EAAYC,UAAZ,EAAuBC,MAAvB,EAA8BC,gBAA9B,QAAqD,mBAArD;AAGE,WAAaC,QAAb;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,UACEC,KADF,GACU;AACNC,MAAAA,iBAAiB,EAAE,KADb;AACqB;AAC3BC,MAAAA,YAAY,EAAE,EAFR;AAEqB;AAC3BC,MAAAA,aAAa,EAAE,EAHT,CAGqB;;AAHrB,KADV;AAAA;AAAA;;AAAA;AAAA;AAAA,wCAOsB;AAAA;;AAChB,UAAIC,SAAS,IAAIA,SAAS,CAACC,WAA3B,EAAwC;AACpCD,QAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyC,UAACC,GAAD,EAAS;AAC9C,cAAMC,MAAM,GAAGD,GAAG,CAACC,MAAnB;;AACA,UAAA,MAAI,CAACC,QAAL,CAAc;AACVC,YAAAA,eAAe,EAAE;AACbC,cAAAA,GAAG,EAAEH,MAAM,CAACI,QADC;AAEbC,cAAAA,GAAG,EAAEL,MAAM,CAACM;AAFC;AADP,WAAd;AAMH,SARD;AASH;AACJ;AAnBH;AAAA;AAAA,6BAsBS;AACP,UAAMC,KAAK,GAAE;AACXC,QAAAA,KAAK,EAAE,KADI;AAEXC,QAAAA,MAAM,EAAE;AAFG,OAAb;AAIA,aACE,oBAAC,GAAD;AAAK,QAAA,MAAM,EAAE,KAAKC,KAAL,CAAWC,MAAxB;AAAgC,QAAA,IAAI,EAAE,EAAtC;AAA0C,QAAA,KAAK,EAAEJ,KAAjD;AAAwD,QAAA,aAAa,EAAE,KAAKG,KAAL,CAAWE,QAAlF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEE,oBAAC,MAAD;AAAQ,QAAA,OAAO,EAAE,KAAKC,aAAtB;AACQ,QAAA,IAAI,EAAE,kBADd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,EAKE,oBAAC,UAAD;AAAY,QAAA,OAAO,EAAE,KAAKC,iBAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADJ,CALF,CADF;AAaD;AAxCD;;AAAA;AAAA,EAA8B5B,SAA9B;AA2CF,eAAeI,gBAAgB,CAAC;AAC9ByB,EAAAA,MAAM,EAAG;AADqB,CAAD,CAAhB,CAEZxB,QAFY,CAAf,C,CAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { Component } from 'react';\nimport {Map,InfoWindow,Marker,GoogleApiWrapper} from 'google-maps-react'\n\n\n  export class Location extends Component {\n    state = {\n      showingInfoWindow: false,  //Hides or the shows the infoWindow\n      activeMarker: {},          //Shows the active marker upon click\n      selectedPlace: {}          //Shows the infoWindow to the selected place upon a marker\n    };\n\n    componentDidMount() {\n        if (navigator && navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition((pos) => {\n                const coords = pos.coords;\n                this.setState({\n                    currentLocation: {\n                        lat: coords.latitude,\n                        lng: coords.longitude\n                    }\n                })\n            })\n        }\n    }\n\n\n  render() {\n    const style ={\n      width: '60%',\n      height: '60%'\n    }\n    return (\n      <Map google={this.props.google} zoom={14} style={style} initialCenter={this.props.location}>\n\n        <Marker onClick={this.onMarkerClick}\n                name={'Current location'} />\n\n        <InfoWindow onClose={this.onInfoWindowClose}>\n            <div>\n              <h1></h1>\n            </div>\n        </InfoWindow>\n      </Map>\n    );\n  }\n}\n\nexport default GoogleApiWrapper({\n  apiKey: (\"AIzaSyDlbBSYoX6bM9k_ZmDCMopQhHPiPI5wjR8\")\n})(Location)\n\n\n// <GoogleMapLoader\n//   containerElement = {mapContainer}\n//   googleMapElement = {\n//     <GoogleMap\n//         defaultZoom={15}\n//         defaultCenter={this.props.location}\n//         options={{streetViewControl:true, mapTypeControl:false}}>\n//         </GoogleMap>\n//       }/>\n"]},"metadata":{},"sourceType":"module"}